// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int           @id @default(autoincrement())
  firstName         String
  lastName          String?
  username          String        @unique
  email             String        @unique
  password          String
  passwordChangedAt DateTime?
  bio               String?
  posts             Post[]
  avatar            Avatar?
  comments          Comment[]
  postsLiked        LikePost[]
  commentsLiked     LikeComment[]
  followings        User[]        @relation("user-follow")
  followers         User[]        @relation("user-follow")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Post {
  id         Int         @id @default(autoincrement())
  caption    String?
  userId     Int
  user       User        @relation(fields: [userId], references: [id])
  usersLiked LikePost[]
  hashtags   Hashtag[]
  photos     PostPhoto[]
  comments   Comment[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Hashtag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Avatar {
  id        Int      @id @default(autoincrement())
  url       String   @unique
  publicId  String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostPhoto {
  id        Int      @id @default(autoincrement())
  url       String   @unique
  publicId  String   @unique
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id         Int           @id @default(autoincrement())
  content    String
  userId     Int
  user       User          @relation(fields: [userId], references: [id])
  usersLiked LikeComment[]
  postId     Int
  post       Post          @relation(fields: [postId], references: [id])
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model LikePost {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId])
}

model LikeComment {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  commentId Int
  comment   Comment  @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, commentId])
}
